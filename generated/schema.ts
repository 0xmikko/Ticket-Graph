// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TicketEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TicketEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TicketEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TicketEvent", id.toString(), this);
  }

  static load(id: string): TicketEvent | null {
    return store.get("TicketEvent", id) as TicketEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get location(): string {
    let value = this.get("location");
    return value.toString();
  }

  set location(value: string) {
    this.set("location", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get imageUrl(): string {
    let value = this.get("imageUrl");
    return value.toString();
  }

  set imageUrl(value: string) {
    this.set("imageUrl", Value.fromString(value));
  }

  get price(): i32 {
    let value = this.get("price");
    return value.toI32();
  }

  set price(value: i32) {
    this.set("price", Value.fromI32(value));
  }

  get qty(): i32 {
    let value = this.get("qty");
    return value.toI32();
  }

  set qty(value: i32) {
    this.set("qty", Value.fromI32(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}

export class Ticket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ticket entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ticket entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ticket", id.toString(), this);
  }

  static load(id: string): Ticket | null {
    return store.get("Ticket", id) as Ticket | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event_id(): i32 {
    let value = this.get("event_id");
    return value.toI32();
  }

  set event_id(value: i32) {
    this.set("event_id", Value.fromI32(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }
}
